rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Users

    match /profile details/{uid} {
      allow read: if true;
      allow write: if isUser(uid);
      allow delete: false;
    }

    match /profile stickers/{uid}{
      allow read: true;
      allow write: if isUser(uid);
      allow delete: false;
    }

    match /display picture/{uid} {
      allow read: true;
      allow write: isUser(uid);
    }

    match /personal details/{uid} {
      allow read: isUser(uid);
      allow write: isUser(uid);
    }

    match /user data/{uid} {
      allow read: false;
      allow create: isUser(uid);
      allow update: false;
      allow delete: false;
    }

    match /activity/{id}/{

      match /collection/ {
        allow read: true;
        allow update: allowCollectionUpdate(id);
        allow delete: false;
        allow create: true;
      }

      match /views/ {
        allow read: true;
        allow update: true;
        allow create: true;
        allow delete: false;
      }

      match /{private}/ {
        allow read: false;
        allow create: true;
        allow update: false;
        allow delete: false;
      }
    }

    match /collection/{cid} {
      allow read: true;
      allow create: allowCollection(resource.data);
      allow update: false;
      allow delete: false;
    }

    match /views/{vid} {
      allow read: true;
      allow create: true;
      allow update: false;
      allow delete: false;
    }

    match /feed/ {

      allow read: true;

      match /{uid}{
      allow read: true;
      allow create: if isUser(uid);
      allow delete: false;

        match /collection/{
            allow read: if isUser(uid);
            allow update: if isUser(uid);
            allow create: if isUser(uid);
            allow delete: false;
        }
      }
      match /explore/global{
       allow read: true;
       allow create: isSignedIn();
       allow update: false;
       allow delete: false;
      }
    }

    match /exclusive ID/{eid} {
      allow read: false;
      allow create: false;
      allow delete: false;
      allow update: currentData().data.amount < get(/databases/$(database)/documents/exclusive ID/$(eid)/private/details).data.allowUse;

      match /private/details {
        allow read: false;
        allow write: false;
      }

      match /users/{uid} {
        allow read: false;
        allow create: if isUser(uid);
        allow update: false;
        allow delete: false;
      }
    }

    match /feedback {
      allow read: false;
      allow write: true;
    }

    // Posts
    match /post details/{pid}{
      allow read: true;
      allow create: if isUser(resource.data.uid);
      allow update: false;
      allow delete: false;
    }

    match /post content/{pid}{
      allow read: true;
      allow create: isSignedIn() && !!(resource.data.fileFormat);
      allow update: false;
      allow delete: false;
    }

    match /sticker content/{pid}{
      allow read: true;
      allow create: isSignedIn() && !!(resource.data.fileFormat);
      allow update: false;
      allow delete: false;
    }

    match /sticker details/{pid}{
      allow read: true;
      allow create: isSignedIn() && !!(resource.data.amountReleased <= 30); //only allow maximum of 30 stickers
      allow update: false;
      allow delete: false;
    }

  }
}

//Write functions
function allowCollection(data){
  return isUser(data.collectorID)
         && (get(/databases/$(database)/documents/activity/$(data.pid)).collected
              / get(/databases/$(database)/documents/sticker details/$(data.pid)).amountReleased ) < 1
         && !(exists(/databases/$(database)/documents/feed/$(data.collectorID))) //person doesnt exist
}

function allowCollectionUpdate(id) {
  return isSignedIn()
         && (existsAfter(/databases/$(database)/documents/feed/$(request.auth.uid)/collection/$(id)) //post activity
         || existsAfter(/databases/$(database)/documents/holder list/$(resource.data.lastPID)/holders/$(request.auth.uid))); //user activity
}

// Helper functions

// Check if user has the specified uid
function isUser(uid) {
  return isSignedIn() && request.auth.uid == uid;
}

// Check if user is signed in
function isSignedIn() {
  return request.auth.uid != null;
}

// Get data being read
function currentData() {
  return resource.data;
}

