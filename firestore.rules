rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    //Write functions

    function getExclusivePrivate(collectionWspace, eid) {
      return get(/databases/$(database)/documents/$(collectionWspace)/$(eid)/private/details);
    }

    function allowCollection(data, collectionWspace){
      return isUser(data.collectorID)
            && (getAfter( /databases/$(database)/documents/activity/$(data.pid)/metrics/collected ).data.counter
                  / get(/databases/$(database)/documents/$(collectionWspace)/$(data.pid)).data.amountReleased ) <= 1 //sticker remaining (<= because getAfter)
            && !(exists(/databases/$(database)/documents/$('holder list')/$(data.pid)/holders/$(data.data.collectorID))) //collection doesn't exist on post
    }

    function allowCollectionUpdate(id, collectionWspace) {
      return isSignedIn()
            && (existsAfter(/databases/$(database)/documents/feed/$(request.auth.uid)/collection/$(id)) //post activity
            || existsAfter(/databases/$(database)/documents/$(collectionWspace)/$(resource.data.lastPID)/holders/$(request.auth.uid))); //user activity
    }

    function getCollectionData(cid) {
      return (getAfter(/databases/$(database)/$('post details')/$(cid))).data;
    }

    function isValidUsername(username) {
      return username.matches('^(?=[a-zA-Z0-9._?!$%&*+-]{2,26}$)');
    }

    function isValidName(name){
      return name.matches('^(?=[a-zA-Z- ]{2,26}$)');
    }
    }


    // Helper functions

    // Check if user has the specified uid
    function isUser(uid) {
      return isSignedIn() && request.auth.uid == uid;
    }

    // Check if user is signed in
    function isSignedIn() {
      return request.auth.uid != null;
    }

    // Get data being read
    function currentData() {
      return resource.data;
    }

    // Get data being read
    function incomingData() {
      return request.resource.data;
    }

    // Users
        match /username/{uid} {
      allow read: if true;
      allow create: if isUser(uid)
                      && getAfter(/databases/$(database)/credentials/$(incomingData().username)).data.uid == uid;
      allow update: if false;
      allow delete: if false;
    }

    match /credentials/{username} {
      allow read: if true;
      allow create: if isUser(incomingData().uid)
                      && isValidUsername(username)
                      && !(exists(/databases/$(database)/credentials/$(username)))
                      && (incomingData().email == request.auth.token.email)
                      && (request.resource.id.size() <= 26);
      allow update: if false;
      allow delete: if false;
    }

    match /profile%20details/{uid} {
      allow read: if true;
      allow write: if isUser(uid) && (incomingData().description.size() <= 300) && (incomingData().link.size() <= 45);
      allow delete: if false;
    }

    match /profile%20stickers/{uid} {
      allow read: if true;
      allow write: if isUser(uid);
      allow update: if incomingData().stickers.size()<=5;
      allow delete: if false;
    }

    match /display%20picture/{uid} {
      allow read: if true;
      allow write: if isUser(uid);
    }

    match /personal%20details/{uid} {
      allow read: if isUser(uid);
      allow create: if isUser(uid) && isValidName(incomingData().name);
      allow update: false;
    }

    match /user%20data/{uid} {
      allow read: if false;
      allow create: if isUser(uid);
      allow update: if false;
      allow delete: if false;
    }

    match /activity/{id} {

      match /metrics/collected {
        allow read: if true;
        allow update: if allowCollectionUpdate(id, "holder list")
                         && incomingData().counter == currentData().counter + 1;
        allow delete: if false;
        allow create: if true;
      }

      match /metrics/views {
        allow read: if true;
        allow update: if incomingData().counter == currentData().counter + 1;
        allow create: if true;
        allow delete: if false;
      }

      match /private/details {
        allow read: if false;
        allow create: if true;
        allow update: if false;
        allow delete: if false;
      }
    }

    match /collection/{cid} {
      allow read: if false;
      allow create: if allowCollection(incomingData(), "sticker details");
      allow update: if false;
      allow delete: if false;
    }

    match /views/{vid} {
      allow read: if true;
      allow create: if true;
      allow update: if false;
      allow delete: if false;
    }

    match /feed {

      allow read: if true;

      match /{uid} {
      allow read: if true;
      allow create: if isUser(uid);
      allow delete: if false;

        match /collection {
            allow read: if isUser(uid);
            allow update: if false;
            allow create: if isUser(uid)
                          && getCollectionData(incomingData().cid).pid == request.resource.id
                          && getCollectionData(incomingData().cid).uid == uid;
            allow delete: if false;
        }
      }
      match /explore/global/{pid} {
       allow read: if true;
       allow create: if isUser(getAfter(/databases/$(database)/documents/$('post details')/$(pid)).data.uid);
       allow update: if false;
       allow delete: if false;
      }
    }

    match /exclusive%20ID/{eid} {
      allow read: if false;
      allow create: if false;
      allow delete: if false;
      allow update: if incomingData().used < getExclusivePrivate('exclusive ID', eid).data.allowUse
                    && incomingData().used == currentData().used + 1;

      match /private/details {
        allow read: if false;
        allow write: if false;
      }

      match /users/{uid} {
        allow read: if false;
        allow create: if isUser(uid);
        allow update: if false;
        allow delete: if false;
      }
    }

    match /feedback {
      allow read: if false;
      allow write: if true;
    }

    // Posts
    match /post%20details/{pid} {
      allow read: if true;
       allow create: if isUser(incomingData().uid)
                      && (incomingData().description.size() <= 300)
                      && (incomingData().title.size() <= 30);
      allow update: if false;
      allow delete: if false;
    }

    match /post%20content/{pid} {
      allow read: if true;
      allow create: if isSignedIn()
                      && !!(incomingData().fileFormat);
      allow update: if false;
      allow delete: if false;
    }

    match /sticker%20content/{pid} {
      allow read: if true;
      allow create: if isSignedIn() && !!(incomingData().fileFormat);
      allow update: if false;
      allow delete: if false;
    }

    match /sticker%20details/{pid} {
      allow read: if true;
      allow create: if isSignedIn() && (incomingData().amountReleased <= 30); //only allow maximum of 30 stickers
      allow update: if false;
      allow delete: if false;
    }

    match /holder%20list/{pid} {
      allow read: if true;
      allow create: if isUser(getCollectionData(incomingData().cid).uid);
      allow update: if false;
      allow delete: if false;

      match /holders {
        allow read: if true;
        allow write: if isSignedIn()
                        && getCollectionData(incomingData().cid).uid == request.resource.id
                        && getCollectionData(incomingData().cid).pid == pid;
      }
    }

  }
}


//check if when you put a value, if doesnt exist return false, if empty return true - should be a pid , match




