{
    "sourceFile": "src/app/feed/feed.component.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1654125045237,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1654125045237,
            "name": "Commit-0",
            "content": "import { MixpanelService } from './../shared/mixpanel.service';\r\nimport { AngularFireAuth } from '@angular/fire/auth';\r\nimport { UsersService } from 'src/app/shared/users.service';\r\nimport { WindowStateService } from './../shared/window.service';\r\nimport { AuthService } from './../auth/auth.service';\r\nimport { ActivatedRoute, Params, Router } from '@angular/router';\r\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\r\nimport { Component, OnInit, OnDestroy, ElementRef, ViewChild } from '@angular/core';\r\nimport { Feed, PostDetails } from './../shared/post.model';\r\nimport { take, takeUntil } from 'rxjs/operators';\r\nimport { FeedService } from './feed.service';\r\nimport { MiscellaneousService } from '../shared/miscellaneous.service';\r\n\r\n@Component({\r\n  selector: 'app-feed',\r\n  templateUrl: './feed.component.html',\r\n  styleUrls: ['./feed.component.css'],\r\n})\r\n\r\nexport class FeedComponent implements OnInit, OnDestroy {\r\n\r\n  pidList$: Observable<Feed[]>;\r\n\r\n  feedList$: BehaviorSubject<Feed[]>;\r\n  notifier$ = new Subject();\r\n\r\n  postsList: Feed[];\r\n\r\n  batch: number = 0;\r\n  maxBatch: number = 0;\r\n  batchSize: number = 4; //number of posts to load - min batch size is 2\r\n  batchNumber: number = 1; //start from 1\r\n  done: boolean = true;\r\n\r\n  showProfileDisplay: boolean; //show the profile display tab\r\n  showProfileNavigation: boolean; //show the profile navigation tab\r\n\r\n  uid$ = new BehaviorSubject<string>(null); //From URL\r\n  myUid$ = new BehaviorSubject<string>(null); \r\n  displayPicture$: Observable<string>;\r\n  myUid: string; //Authenticated user uid\r\n  uid: string; //current profile uid\r\n  isAuthenticated: boolean;\r\n  lastRoute: string; //last route that user was on\r\n  mobileCheck: boolean;\r\n  tabletCheck: boolean;\r\n\r\n  @ViewChild('post') postRef: ElementRef;\r\n\r\n  profileStickerEdit: boolean = false;\r\n\r\n  constructor(private miscellaneousService: MiscellaneousService,\r\n              private feedService: FeedService,\r\n              private router: Router,\r\n              private route: ActivatedRoute,\r\n              private auth: AngularFireAuth,\r\n              private windowStateService: WindowStateService,\r\n              private usersService: UsersService,\r\n              private mixpanelService: MixpanelService) {\r\n   }\r\n\r\n\r\n  ngOnInit(): void {\r\n\r\n    const emptyFeed = new Feed(undefined, undefined, undefined);\r\n    this.feedList$ = new BehaviorSubject<Feed[]>([emptyFeed]);\r\n\r\n    this.auth.onAuthStateChanged((user) => {\r\n      this.isAuthenticated = !!user;\r\n      if (!this.isAuthenticated) return;\r\n      this.myUid = user.uid;\r\n      this.myUid$.next(this.myUid);\r\n      this.displayPicture$ = this.usersService.getDisplayPicture(this.myUid);\r\n      if ((this.router.url.split('/')[1] === 'profile'\r\n           || this.router.url.split('/')[1] === 'collection')\r\n          && this.uid === this.myUid) this.showProfileNavigation = true;\r\n    });\r\n\r\n    this.windowStateService.screenWidthValue.pipe(takeUntil(this.notifier$))\r\n    .subscribe(val => {\r\n      if (!val) return;\r\n      this.tabletCheck = this.windowStateService.tabletCheck;\r\n      this.mobileCheck = this.windowStateService.mobileCheck;\r\n    });\r\n\r\n    this.route.params\r\n    .subscribe(\r\n      (params: Params) => {\r\n        this.uid$.next(params['id']);\r\n    });\r\n\r\n    this.feedService.currentPost.pipe(takeUntil(this.notifier$)).subscribe(pid => {\r\n      if (!pid) return;\r\n      const currentFeed = this.feedList$.value\r\n      const index = currentFeed.findIndex(post => post.pid === pid);\r\n      if (index === currentFeed.length - 2) this.moreBatch();\r\n    })\r\n\r\n    this.miscellaneousService.profileStickerEdit.pipe(takeUntil(this.notifier$)).subscribe(value => this.profileStickerEdit = value);\r\n\r\n    this.getPosts(this.router.url);\r\n\r\n    this.router.events.pipe(takeUntil(this.notifier$)).subscribe(val => {\r\n      this.getPosts(this.router.url);\r\n    });\r\n\r\n  }\r\n\r\n  getPosts(currentRoute: string) {\r\n    if (currentRoute === this.lastRoute) return;\r\n    this.lastRoute = currentRoute;\r\n    currentRoute = currentRoute.split('/')[1]; //get parent route\r\n\r\n    this.showProfileDisplay = false;\r\n    this.showProfileNavigation = false;\r\n    this.done = true;\r\n    if (currentRoute === 'explore') {\r\n      this.myUid$.pipe(take(2)).subscribe(uid => {\r\n        if (!uid) return;\r\n        this.uid = uid;\r\n        setTimeout(() => this.uid$.next(uid), 100);\r\n      });\r\n      this.pidList$ = this.feedService.getExplorePage();\r\n    } else if (currentRoute === 'collection') {\r\n      this.uid = this.route.snapshot.params['id'];\r\n      this.uid$.next(this.uid);\r\n      this.pidList$ = this.feedService.getCollectionPage(this.uid);\r\n      if (this.tabletCheck) this.showProfileDisplay = true;\r\n      this.showProfileNavigation = true;\r\n    } else if (currentRoute === 'profile') {\r\n      this.uid = this.route.snapshot.params['id']\r\n      this.uid$.next(this.uid);\r\n      this.pidList$ = this.feedService.getProfilePage(this.uid);\r\n      if (this.tabletCheck) this.showProfileDisplay = true;\r\n      if (this.uid === this.myUid) this.showProfileNavigation = true;\r\n    } else if (currentRoute === 'post') {\r\n      const pid = this.route.snapshot.params['id'];\r\n      this.pidList$ = this.feedService.getPostPage(pid);\r\n      this.pidList$.pipe(take(1)).subscribe(res => {\r\n        this.uid = res[0].creatorID;\r\n        this.uid$.next(this.uid);\r\n      });\r\n      if (this.tabletCheck) this.showProfileDisplay = true;\r\n    }\r\n\r\n    this.setUpPosts();\r\n  }\r\n\r\n  setUpPosts() {\r\n    this.pidList$.pipe(take(1)).subscribe(response => {\r\n      if (!response) return this.done = true;\r\n\r\n      this.done = false;\r\n      this.postsList = response;\r\n      if (this.postsList.length != 0) {\r\n        this.initBatch();\r\n      } else {\r\n        this.done = true;\r\n        this.feedList$.next([]);\r\n      }\r\n\r\n    }, error => {\r\n      this.feedList$.next([]);\r\n      this.done = true;\r\n      return console.log(error);\r\n    });\r\n  }\r\n\r\n  initBatch() { // get initial batch of posts to render\r\n    this.batchNumber = 1;\r\n    if (this.postsList.length <= this.batchSize) {\r\n      this.feedList$.next(this.postsList);\r\n      this.done = true;\r\n    } else {\r\n      this.feedList$.next(this.postsList.slice(0,this.batchSize));\r\n    }\r\n    this.batchNumber++;\r\n    this.feedService.currentPost.next(this.feedList$.value[0].pid);\r\n  }\r\n\r\n  moreBatch() { // get the next batch of posts used for manual render\r\n    if (this.done) return;\r\n    if ((this.postsList.length - this.batchSize*this.batchNumber) <= 0) {\r\n      this.feedList$.next(this.postsList);\r\n      this.done = true;\r\n    } else {\r\n      this.feedList$.next(this.postsList.slice(0,this.batchSize*this.batchNumber));\r\n    }\r\n    this.batchNumber++;\r\n  }\r\n\r\n  trackByFn(index, item) {\r\n    return !!item ? item.pid : index;\r\n  }\r\n\r\n  onClickRouteChange(via) {\r\n    this.mixpanelService.setRoutingVia(via);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.notifier$.next();\r\n    this.notifier$.complete();\r\n    this.feedList$.complete();\r\n  }\r\n}\r\n"
        }
    ]
}